{"version":3,"file":"static/js/278.9671a77d.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.jsx","pages/Movies/Movies.jsx","services/apiService.jsx","services/constants.jsx"],"sourcesContent":["import { BASE_IMG_URL } from 'services/constants';\nimport placeholder from '../../img/placeholder.jpg';\nimport { useLocation, Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {movies.map(({ id, title, poster_path, vote_average, release_date }) => (\n        <li key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            <img\n              src={poster_path ? BASE_IMG_URL + poster_path : placeholder}\n              alt={title}\n            />\n            <p>\n              {title} ({release_date.slice(0, 4)})\n              <span>{vote_average ? vote_average.toFixed(1) : 'N/A'}</span>\n            </p>\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.object.isRequired),\n};\n","import { MoviesList } from 'components/MoviesList/MoviesList';\nimport { Loader } from 'components/Loader/Loader';\nimport { getMoviesByQuery } from 'services/apiService';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport toast, { Toaster } from 'react-hot-toast';\n\nconst Movies = () => {\n  const [query, setQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  useEffect(() => {\n    const searchQuery = searchParams.get('query');\n\n    if (!searchQuery) {\n      return;\n    }\n\n    const fetchMoviesByQuery = async () => {\n      try {\n        const moviesByQuery = await getMoviesByQuery(\n          searchQuery.trim().toLowerCase()\n        );\n        if (!moviesByQuery.length) {\n          throw new Error('Bad Query');\n        }\n        setMovies(moviesByQuery);\n      } catch (error) {\n        toast.error(`${error.message}! Please try again! :(`);\n      } finally {\n        setIsLoading(false);\n        setQuery(searchQuery.trim().toLowerCase());\n      }\n    };\n\n    fetchMoviesByQuery();\n  }, [searchParams]);\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    if (!query) {\n      toast.error(`Enter what you're looking for! :)`);\n      return;\n    }\n\n    if (\n      searchParams.get('query')?.trim().toLowerCase() ===\n      query.trim().toLowerCase()\n    ) {\n      toast.error(`Try something else! :)`);\n      return;\n    }\n    setIsLoading(true);\n    setSearchParams({ query });\n  };\n\n  const handleChange = evt => {\n    setQuery(evt.target.value);\n  };\n\n  return (\n    <>\n      <h1>Movies</h1>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" name=\"query\" value={query} onChange={handleChange} />\n        <button type=\"submit\">Search</button>\n      </form>\n      {isLoading && <Loader />}\n      <MoviesList movies={movies} />\n      <Toaster />\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const API_KEY = '3bff356dabf2463bd3474fa7d5296b16';\n\nexport const getTrendingMovies = async () => {\n  const resp = await axios.get(`/trending/movie/day?`, {\n    params: {\n      api_key: API_KEY,\n      page: 1,\n    },\n  });\n  return resp.data.results;\n};\n\nexport const getMoviesByQuery = async query => {\n  const resp = await axios.get(\n    `/search/movie?&language=en-US&query=${query}&page=1&include_adult=false`,\n    {\n      params: {\n        api_key: API_KEY,\n        page: 1,\n      },\n    }\n  );\n  return resp.data.results;\n};\n\nexport const getMovieDetails = async id => {\n  const resp = await axios.get(`movie/${id}?&language=en-US`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return resp.data;\n};\n\nexport const getMovieCast = async id => {\n  const resp = await axios.get(`movie/${id}/credits?&language=en-US`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return resp.data.cast;\n};\n\nexport const getMovieReviews = async id => {\n  const resp = await axios.get(`movie/${id}/reviews?&language=en-US`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return resp.data.results;\n};\n","export const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w400';\n"],"names":["MoviesList","movies","location","useLocation","map","id","title","poster_path","vote_average","release_date","to","state","from","src","BASE_IMG_URL","placeholder","alt","slice","toFixed","useState","query","setQuery","setMovies","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","useEffect","searchQuery","get","fetchMoviesByQuery","getMoviesByQuery","trim","toLowerCase","moviesByQuery","length","Error","toast","message","onSubmit","evt","preventDefault","type","name","value","onChange","target","axios","API_KEY","getTrendingMovies","params","api_key","page","resp","data","results","getMovieDetails","getMovieCast","cast","getMovieReviews"],"sourceRoot":""}